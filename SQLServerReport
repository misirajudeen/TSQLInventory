-- Author: Sirajudeen Mohammed Ibrahim
-- Description: This script pulls SQL Server Inventory, except for FCI Cluster name (which is still WIP mode)
-- Support: This Script has been validated in SQL Server Versions 2016 and above
-- Type: TSQL
-- For: DBA
-- Required Permission: SYSADMIN
-- Created Date: 2021-September
-- Updated Date: 2023-March as covering more than 1 AG data, DB details, Application_Name etc.,
-- Updated Date: 2023-June as including LinkedServer, CDC, Encryption and Replication details

-- Code Starts Here -- 
-- Execute in Registered Server or in Chosen Instance -- 
-- Detailed Report-- 

-- Create Temp Table1 -- 
 CREATE TABLE #CPUValues(
[index]        SMALLINT,
[description]  VARCHAR(128),
[server_cores] SMALLINT,
[value]        VARCHAR(5) 
)
 
 -- Create Temp Table2 -- 
CREATE TABLE #MemoryValues(
[index]         SMALLINT,
[description]   VARCHAR(128),
[server_memory] DECIMAL(10,2),
[value]         VARCHAR(64) 
)
 
-- Create Temp Table3 -- 
CREATE TABLE #Drives(
[drive]   VARCHAR(1),
[Mb Free] bigint
)

-- Populate Temp Table1 -- 
INSERT INTO #CPUValues
EXEC xp_msver 'ProcessorCount'
 
-- Populate Temp Table2 -- 
INSERT INTO #MemoryValues 
EXEC xp_msver 'PhysicalMemory'

-- Populate Temp Table3 -- 
INSERT INTO #Drives 
EXEC XP_FIXEDDRIVES

-- Main Derivation_1 -- 
-- Instance, Server related -- 
 SELECT
 DISTINCT 
           CONVERT(varchar(250), SERVERPROPERTY('ComputerNamePhysicalNetBIOS')) COLLATE Latin1_General_CI_AS AS [CurrentHost],
		   CONVERT(varchar(250), ISNULL(STUFF((select ', ' + cluster_name from sys.dm_hadr_cluster FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [Cluster_Name_HAG],
		   'Not Yet Derived' AS Cluster_Name_FCI,

		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + servicename FROM sys.dm_server_services FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [Service_Name],
		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + service_account FROM sys.dm_server_services FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [Service_Account],
		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + status_desc FROM sys.dm_server_services FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [Service_Status],

           CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + NodeName FROM fn_virtualservernodes() FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [ClusterNodes_FCI],
		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + UPPER(status_description) FROM sys.dm_os_cluster_nodes  FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS ClusterNodes_FCI_Status,

		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + member_name FROM sys.dm_hadr_cluster_members WHERE member_type=0 FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [ClusterNodes_HAG],
		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + member_state_desc FROM sys.dm_hadr_cluster_members WHERE member_type=0 FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [CluserNodes_HAG_Status],
		   
		   (SELECT (DATALENGTH(CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + UPPER(status_description) FROM sys.dm_os_cluster_nodes  FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS)-DATALENGTH(REPLACE(CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + UPPER(status_description) FROM sys.dm_os_cluster_nodes  FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS,'UP','')))/DATALENGTH('UP') ) AS FCI_ServerCount,  
		   (SELECT (DATALENGTH(CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + member_state_desc FROM sys.dm_hadr_cluster_members WHERE member_type=0 FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS)-DATALENGTH(REPLACE(CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + member_state_desc FROM sys.dm_hadr_cluster_members WHERE member_type=0 FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS,'UP','')))/DATALENGTH('UP')) AS HAG_ServerCount,

		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + dns_name from sys.availability_group_listeners FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS HAG_Listener_Name,
		   CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + ip_configuration_string_from_cluster from sys.availability_group_listeners FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS HAG_Listener_Ips,

		 CASE 
		 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) like '11%'   THEN 'SQL Server 2012'
         WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) like '12%'   THEN 'SQL Server 2014'
         WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) like '13%'   THEN 'SQL Server 2016'     
         WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) like '14%'   THEN 'SQL Server 2017'
         WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) like '15%'   THEN 'SQL Server 2019' 
         ELSE 'UNKNOWN'
        END AS SQL_VERSION,
    OSVersion = SUBSTRING(RIGHT(@@version, LEN(@@version)-charindex (' ON ',@@VERSION)-2),1,CHARINDEX('<',RIGHT(@@version, LEN(@@version)- 3 -charindex (' ON ',@@VERSION)))),
	SERVERPROPERTY('ProductLevel') AS SP_CU_Level,
	SUBSTRING (@@version, Charindex( '(', @@version )+1,  Charindex( ')', @@version )-Charindex( '(', @@version )-1) SP_CU_Installed,
    SUBSTRING(CONVERT(VARCHAR(255),SERVERPROPERTY('EDITION')),0,CHARINDEX('Edition',CONVERT(VARCHAR(255),SERVERPROPERTY('EDITION')))) + 'Edition' AS SQL_EDITION,
	(SELECT DISTINCT local_tcp_port FROM sys.dm_exec_connections WHERE SESSION_ID = @@SPID) AS DB_Port,

	ISNULL(STUFF((SELECT ', ' + CAST(PORT AS NVARCHAR(MAX)) from sys.availability_group_listeners FOR XML PATH('')), 1, 1, '' ), '') AS HAG_Port,

	(SELECT ROUND(CONVERT(DECIMAL(10,2),server_memory/1024.0),1) FROM #MemoryValues) AS Server_Available_Memory,
	(SELECT [value_in_use] FROM sys.configurations WHERE [name] = 'max server memory (MB)') AS Server_Configured_Memory,
	(SELECT Server_Cores FROM #CPUValues) AS Server_Cores,
    
	(SELECT Server_type = CASE WHEN dosi.virtual_machine_type = 1 THEN 'Virtual'  ELSE 'Physical' END FROM sys.dm_os_sys_info dosi) Server_Type,

	(SELECT COUNT(*) FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE') AS OnlineCpuCount,
    (SELECT cpu_count FROM sys.dm_os_sys_info O) AS LogicalCpuCount,

	(SELECT hyperthread_ratio FROM sys.dm_os_sys_info) AS Hyperthread_Ratio,
	(SELECT cpu_count/hyperthread_ratio FROM sys.dm_os_sys_info) AS Physical_CPU_Count,
	(SELECT sqlserver_start_time FROM sys.dm_os_sys_info) SQL_Last_Start_Time, 

   	CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + DriveName FROM sys.dm_io_cluster_shared_drives FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [CluserNodes_Shared_FCI_Drives],
	CONVERT(varchar(250), ISNULL(STUFF((SELECT ', ' + Drive FROM #Drives FOR XML PATH('')), 1, 1, '' ), '')) COLLATE Latin1_General_CI_AS AS [HAGNodes_Drives]

INTO #MainDerivation_1

-- Interim table for User Databases --
DECLARE @DB_Name TABLE(DBName SYSNAME)
INSERT @DB_Name SELECT NAME FROM sys.databases WHERE DATABASE_ID >4 -- exclude system Databases

-- Main Derivation_2 -- 
-- Derivation for Custom Fields -- 
SELECT 
CONVERT(varchar(500), ISNULL(STUFF((SELECT ', ' + DBName FROM @DB_Name FOR XML PATH('')), 1, 1, '' ), ''))User_DB_Names,
(SELECT COUNT(*) FROM @DB_Name) UserDB_Count,
(select CONVERT(decimal(10,2),(SUM(size * 8.00) / 1024.00 / 1024.00)) from sys.master_files mf INNER JOIN sys.databases d ON d.database_id = mf.database_id WHERE d.database_id > 4) UserDBSize_GB,
CASE WHEN MD1.Service_Account LIKE '%NT%' THEN 'Update_SVC-Account' ELSE 'No_Action' END Service_Account_Action,
CASE WHEN MD1.Server_Configured_Memory =2147483647 THEN 'Update_Memory' ELSE 'No_Action' END Server_Memory_Action,
CASE WHEN MD1.Server_Cores <> MD1.OnlineCpuCount THEN 'Update_SQL-License' ELSE 'No_Action' END Server_SQL_License_Action,
MD1.*
INTO #MainDerivation_2
FROM #MainDerivation_1 MD1

-- Final_Derivation -- 
-- With hardcoded Application Name/DB Name logic as deriving from Database name -- 
-- Have to include for all the Inventory Databases -- 
-- CDC, LinkedServer, Encryption and Replication dependency added -- 

SELECT 
(SELECT 
CASE WHEN User_DB_Names LIKE '%AG_Report%' THEN 'SQLServer_Monitor' 
	 WHEN User_DB_Names LIKE '%Establishment%' THEN 'Revamp' 
     WHEN User_DB_Names LIKE '%Moamalat%' THEN 'Moamalat' 
	 WHEN User_DB_Names LIKE '%Deepsecurity%' THEN 'TrendMicro'  
	 WHEN User_DB_Names LIKE '%WSO%' THEN 'MDM'  
	 WHEN User_DB_Names LIKE '%ESG%' THEN 'ForcePoint'
	 WHEN User_DB_Names LIKE '%Black%' THEN 'Gemalto'  
ELSE NULL END 
FROM #MainDerivation_1) Application_Name,
(SELECT 
CASE 
WHEN (User_DB_Names LIKE '%Report%' OR User_DB_Names LIKE '%PowerBI%') THEN 'True' ELSE NULL END FROM #MainDerivation_1) RS_PBI_Dependency,
(SELECT 
CASE 
WHEN User_DB_Names LIKE '%SSISDB%' THEN 'True' ELSE NULL END FROM #MainDerivation_1) SSIS_Dependency,
(SELECT COUNT(*) FROM sys.Servers a 
LEFT OUTER JOIN sys.linked_logins b ON b.server_id = a.server_id
LEFT OUTER JOIN sys.server_principals c ON c.principal_id = b.local_principal_id
WHERE is_linked=1) LinkedServer_Count,
(SELECT COUNT(*) FROM sys.tables st
WHERE is_replicated = 1)Replication_Count,
(SELECT  COUNT(is_cdc_enabled) FROM sys.databases 
where is_cdc_enabled=1) CDC_Count,
(SELECT CASE WHEN COUNT(*)= 0 THEN 0 ELSE COUNT(*) END Encrypted_DBCount
	FROM sys.databases db
    LEFT OUTER JOIN sys.dm_database_encryption_keys dm ON db.database_id = dm.database_id
	WHERE is_encrypted <> 0
)Encrypted_DBCount,
MD2.* 
FROM #MainDerivation_2 MD2

-- DROP Temp Tables -- 
DROP TABLE #CPUValues
DROP TABLE #MemoryValues
DROP TABLE #Drives
DROP TABLE #MainDerivation_1
DROP TABLE #MainDerivation_2

-- Code Ends Here -- 
